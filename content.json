{"meta":{"title":"旧时明月","subtitle":"一个注意形象的程序员","description":"","author":"旧时明月","url":"http://www.ithushuai.com","root":"/"},"pages":[{"title":"关于","date":"2019-12-10T11:53:32.617Z","updated":"2019-12-10T11:53:32.617Z","comments":false,"path":"about/index.html","permalink":"http://www.ithushuai.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-12-10T11:53:32.617Z","updated":"2019-12-10T11:53:32.617Z","comments":false,"path":"books/index.html","permalink":"http://www.ithushuai.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-12-10T11:53:32.618Z","updated":"2019-12-10T11:53:32.618Z","comments":false,"path":"categories/index.html","permalink":"http://www.ithushuai.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-12-10T12:20:09.047Z","updated":"2019-12-10T11:53:32.619Z","comments":false,"path":"repository/index.html","permalink":"http://www.ithushuai.com/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-12-10T11:53:32.618Z","updated":"2019-12-10T11:53:32.618Z","comments":true,"path":"links/index.html","permalink":"http://www.ithushuai.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-12-10T11:53:32.619Z","updated":"2019-12-10T11:53:32.619Z","comments":false,"path":"tags/index.html","permalink":"http://www.ithushuai.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"网络正常情况下maven依赖仍无法下载的解决方法","slug":"网络正常情况下maven依赖仍无法下载的解决方法","date":"2020-02-10T08:57:24.000Z","updated":"2020-02-10T10:01:11.951Z","comments":true,"path":"2020/02/10/网络正常情况下maven依赖仍无法下载的解决方法/","link":"","permalink":"http://www.ithushuai.com/2020/02/10/%E7%BD%91%E7%BB%9C%E6%AD%A3%E5%B8%B8%E6%83%85%E5%86%B5%E4%B8%8Bmaven%E4%BE%9D%E8%B5%96%E4%BB%8D%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","excerpt":"","text":"有时候我们在maven项目的pom文件中添加了依赖坐标之后，部分依赖无法正常导入，如果使用的是idea工具，依赖坐标会飘红，此时网络连接正常，刷新maven之后仍无法下载jar包。出现这种情况的原因可能是配置的maven远程仓库中没有指定的jar包，或者网络原因，无论什么原因，如果不想耽误时间，可以采取下面的方法，来进行手动导入依赖到本地maven仓库。 例如，我在pom文件中添加了如下依赖： &lt;dependency&gt; &lt;groupId&gt;org.glassfish.web&lt;&#x2F;groupId&gt; &lt;artifactId&gt;javax.el&lt;&#x2F;artifactId&gt; &lt;version&gt;2.2.4&lt;&#x2F;version&gt;&#x2F;&#x2F;依赖无法导入，飘红&lt;&#x2F;dependency&gt; 第一步：访问网站 https://mvnrepository.com ，该网站收录了几乎所有的依赖资源，通过关键词进行搜索，比如这里我要搜索“javax.el”，如下： 红圈圈住的就是我们想要的，然后点击超链接进入，找到对应版本： 继续点击红圈超链接，点击“jar”，即可下载对应的jar包到本地电脑： 第二步：安装本地jar包到本地maven仓库： 有两种方式： 进入jar包所在目录运行如下命令： mvn install:install-file -DgroupId&#x3D;org.glassfish.web -DartifactId&#x3D;javax.el -Dversion&#x3D;2.2.4 -Dfile&#x3D;javax.el-2.2.4.jar -Dpackaging&#x3D;jar 打开cmd直接运行： mvn install:install-file -DgroupId&#x3D;org.glassfish.web -DartifactId&#x3D;javax.el -Dversion&#x3D;2.2.4 -Dfile&#x3D;javax.el-2.2.4.jar -Dpackaging&#x3D;jar -Dfile&#x3D;C:\\javax.el-2.2.4.jar 使用注意：以上命令不可以直接使用，需要根据自己需要修改DgroupId(groupId)、DartifactId(artifactId)、Dversion(version)以及Dfile对应的下载jar包的路径 命令执行完之后，jar就会被添加到本地maven仓库，此时idea一般会自动刷新，飘红消失，如果飘红仍未消失，reimport一下maven即可。","categories":[{"name":"开发日常","slug":"开发日常","permalink":"http://www.ithushuai.com/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://www.ithushuai.com/tags/maven/"}]},{"title":"类加载器的阶段","slug":"the-stage-of-classloading","date":"2019-12-08T15:13:36.000Z","updated":"2019-12-08T15:14:19.392Z","comments":true,"path":"2019/12/08/the-stage-of-classloading/","link":"","permalink":"http://www.ithushuai.com/2019/12/08/the-stage-of-classloading/","excerpt":"","text":"@TOC 在java代码中，类的加载、连接与初始化过程都是在程序运行期间完成的 类加载器的阶段类加载过程分为：加载、连接、初始化三个大的阶段，其中连接又可以细分为验证、准备、解析三个过程。 加载查找并加载类的二进制数据，在此阶段，虚拟机完成以下3件事情： 通过一个类的权限定类名来获取定义此类的二进制字节流。 将这个字节流所代表的的静态存储结构转化为方法区的运行时数据结构。 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。 加载.class文件的方式： 从本地系统中直接加载 通过网络下载.class文件 从zip、jar等归档文件中记载 将java源文件动态编译成.class文件（例如jsp最终会被编译成.class文件） 连接 验证：确保被加载类的正确性 准备：为类的静态变量分配内存，并将其初始化为默认值 解析：把类中的符号引用转化为直接引用 符号引用以一组符号来描述所引用的目标, 符号可以是任何形式的字面量, 只要使用时能够无歧义的定位到目标即可. 例如, 在Java中, 一个Java类将会编译成一个class文件. 在编译时, Java类并不知道所引用的类的实际地址, 因此只能使用符号引用来代替. 比如org.simple.People类引用了org.simple.Language类, 在编译时People类并不知道Language类的实际内存地址, 因此只能使用符号org.simple.Language来表示Language类的地址————————————————版权声明：本文为CSDN博主「Glenn甘露」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/BraveLoser/article/details/82500474 直接引用：通过指针的方式直接定向到特定目标的方法或者成员变量 初始化为类的静态变量赋予正确的初始值。–注：所有的java虚拟机实现必须在每个类或接口被java程序“首次主动使用”时才初始化它们 主动使用与被动使用java程序对类的使用分为主动使用和被动使用 主动使用只要涉及到以下情况，就是对类的主动使用： 创建类是实例 访问某个类或接口的静态变量，或者给静态变量赋值 调用类的静态方法 反射（Class.forName(“Xxx.class”)） 初始化一个类的子类（当一个类在初始化时，要求其父类全部已经初始化完毕） Java虚拟机启动时被标明为启动类的类（包含main方法的类） JDK1.7开始提供的动态语言支持：java.lang.invoke.MethodHandle实例解析结果REF_getstatic，REF_putStatic，REF_invokeStatic句柄对应的类如果没有初始化，则初始化 被动使用除了以上七种情况，其他使用Java类的方式都是被动使用，都不会导致类的初始化 下面举两个例子来深刻理解一下主动使用和被动使用：例1 public class MyTest1 &#123; public static void main(String[] args) &#123; System.out.println(MyChild1.str); &#125;&#125;class MyParent1&#123; public static String str &#x3D; &quot;hello world&quot;; static &#123; System.out.println(&quot;MyParent1 static block&quot;); &#125;&#125;class MyChild1 extends MyParent1&#123; static &#123; System.out.println(&quot;MyChild1 static block&quot;); &#125;&#125; 这段代码运行结果为： MyParent1 static blockhello world 在main方法中执行打印MyChild1.str，由于str是父类MyParent1 中的静态变量，也就是访问了父类的静态变量，触发了父类的主动使用，因此父类会初始化，因而执行静态代码块，输出”MyParent1 static block”，而子类并没有涉及到主动使用的其中情况之一，因此不会初始化。 例2 public class MyTest2 &#123; public static void main(String[] args) &#123; System.out.println(MyChild2.str2); &#125;&#125;class MyParent2&#123; public static String str &#x3D; &quot;hello world&quot;; static &#123; System.out.println(&quot;MyParent2 static block&quot;); &#125;&#125;class MyChild2 extends MyParent2&#123; public static String str2 &#x3D; &quot;welcome&quot;; static &#123; System.out.println(&quot;MyChild2 static block&quot;); &#125;&#125; 这段代码的输出结果为： MyParent2 static blockMyChild2 static blockwelcome 在main方法中执行打印MyChild2.str2，在子类中存在这个静态变量，于是直接访问子类的str2，由于访问静态成员属于主动使用，因此子类初始化。但是为什么父类的静态代码块也执行了呢？不要忘了前面触发主动使用的情况中有一条：子类初始化，必须要其所有父类都先进行初始化，所以先执行父类MyParent2 的静态代码块，再执行子类的静态代码块。","categories":[{"name":"JVM","slug":"JVM","permalink":"http://www.ithushuai.com/categories/JVM/"}],"tags":[{"name":"classLoader","slug":"classLoader","permalink":"http://www.ithushuai.com/tags/classLoader/"}]},{"title":"稀疏数组的实现","slug":"SparseArray","date":"2019-12-08T14:55:29.000Z","updated":"2019-12-08T15:12:38.123Z","comments":true,"path":"2019/12/08/SparseArray/","link":"","permalink":"http://www.ithushuai.com/2019/12/08/SparseArray/","excerpt":"","text":"稀疏数组就是一个数组中大部分元素都未被使用或者为0，这种数组会造成内存的浪费，所以可以通过一种压缩的方式来表示稀疏数组的内容。压缩方式：1.记录数组一共有几行几列，有多少个非零的值2.把非零元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模，其转化如下图：压缩后的稀疏数组是一个n行3列的数组，其中第一行分别记录原始数组中的行数、列数和非零元素个数；从第二行开始，每行分别记录原始数组中第1-n个非零元素的行索引、列索引和元素值。实现代码如下： public class SparseArray &#123; public static void main(String[] args) throws Exception &#123; &#x2F;&#x2F;创建原始数组11*11 int[][] srcArray &#x3D; new int[11][11]; srcArray[1][2] &#x3D; 1; srcArray[2][3] &#x3D; 2; &#x2F;&#x2F;打印原始数组 printArr(srcArray); System.out.println(&quot;-----------原始数组↑--------------&quot;); &#x2F;&#x2F;将二维数组转成稀疏数组 &#x2F;&#x2F;获取原始数组的行数和列数 int srcRows &#x3D; srcArray.length; int srcColumns &#x3D; srcArray[0].length; &#x2F;&#x2F;1.先遍历数组，获得数组中非0数据的个数 int sum &#x3D; 0; for (int[] row : srcArray) &#123; for (int data : row) &#123; if (data !&#x3D; 0) &#123; sum++; &#125; &#125; &#125; &#x2F;&#x2F;2.得到数组中非0数据的个数后，初始化稀疏数组 int[][] sparseArray &#x3D; new int[sum + 1][3]; &#x2F;&#x2F;3.给稀疏数组第一行赋值 sparseArray[0][0] &#x3D; srcRows; sparseArray[0][1] &#x3D; srcColumns; sparseArray[0][2] &#x3D; sum; &#x2F;&#x2F;4.遍历原始数组，将非零数值以及其行和列赋给稀疏数组的相应位置 int index &#x3D; 1;&#x2F;&#x2F;从稀疏数组的第二行开始 for (int i &#x3D; 0; i &lt; srcRows; i++) &#123; for (int j &#x3D; 0; j &lt; srcColumns; j++) &#123; if (srcArray[i][j] !&#x3D; 0) &#123; sparseArray[index][0] &#x3D; i; sparseArray[index][1] &#x3D; j; sparseArray[index][2] &#x3D; srcArray[i][j]; index++; &#125; &#125; &#125; &#x2F;&#x2F;打印稀疏数组 printArr(sparseArray); System.out.println(&quot;-----------稀疏数组↑--------------&quot;); &#x2F;&#x2F;将稀疏数组恢复成原始数组 &#x2F;&#x2F;1.获取稀疏数组的第一行的前两个元素，得到原始数组的行和列 int[][] srcArray2 &#x3D; new int[sparseArray[0][0]][sparseArray[0][1]]; &#x2F;&#x2F;2.从稀疏数组的第二行开始，获取非零数值及其行和列，赋给原始数组中相应的元素 for (int i &#x3D; 1; i &lt; sparseArray.length; i++) &#123; srcArray2[sparseArray[i][0]][sparseArray[i][1]] &#x3D; sparseArray[i][2]; &#125; &#x2F;&#x2F;打印原始数组 printArr(srcArray2); System.out.println(&quot;-----------原始数组↑--------------&quot;); &#x2F;&#x2F;将稀疏数组持久化到本地磁盘 File file &#x3D; new File(&quot;e:\\\\array.txt&quot;); FileWriter fileWriter &#x3D; new FileWriter(file); for (int[] row : sparseArray) &#123; for (int data : row) &#123; fileWriter.write(data + &quot;\\t&quot;); &#125; fileWriter.write(&quot;\\r\\n&quot;); &#125; fileWriter.close(); &#x2F;&#x2F;将稀疏数组从文件中读取出来 BufferedReader reader &#x3D; new BufferedReader(new FileReader(file)); String line; List&lt;int[]&gt; list &#x3D; new ArrayList&lt;&gt;();&#x2F;&#x2F;该集合用于保存文件中的每一行数组 while ((line &#x3D; reader.readLine()) !&#x3D; null) &#123; &#x2F;&#x2F;通过Stream流处理将文件中每一行数据转化成整型数组 list.add(Stream.of(line.split(&quot;\\t&quot;)).map(Integer::parseInt).mapToInt(Integer::intValue).toArray()); &#125; int row &#x3D; list.size(); int column &#x3D; list.get(0).length; int[][] sparseArray2 &#x3D; new int[row][column]; for (int i &#x3D; 0; i &lt; row; i++) &#123; sparseArray2[i] &#x3D; list.get(i); &#125; &#x2F;&#x2F;打印稀疏数组 printArr(sparseArray2); System.out.println(&quot;-----------稀疏数组↑--------------&quot;); &#125; private static void printArr(int[][] arr) &#123; &#x2F;&#x2F;打印原始数组 for (int[] row : arr) &#123; for (int data : row) &#123; System.out.printf(&quot;%d\\t&quot;, data); &#125; System.out.println(); &#125; &#125;&#125;","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://www.ithushuai.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"sparseArray","slug":"sparseArray","permalink":"http://www.ithushuai.com/tags/sparseArray/"}]},{"title":"JDK8新特性之函数式接口","slug":"jdk8features","date":"2019-12-08T14:53:25.000Z","updated":"2019-12-08T15:16:44.792Z","comments":true,"path":"2019/12/08/jdk8features/","link":"","permalink":"http://www.ithushuai.com/2019/12/08/jdk8features/","excerpt":"","text":"函数式接口函数式接口在Java中是指：有且仅有一个抽象方法的接口。函数式接口的实现都可以通过JDK8引入的lambda表达式来表达。在java中，只有确保接口中有且仅有一个抽象方法，才能通过lambda顺利地进行推导。 @FunctionalInterface注解与 @Override 注解的作用类似，Java 8中专门为函数式接口引入了一个新的注解： @FunctionalInterface 。该注 解可用于一个接口的定义上： 一旦使用该注解来定义接口，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。需要注意的是，即使不使用该注解，只要满足函数式接口的定义，这仍然是一个函数式接口，使用起来都一样。 常用函数式接口JDK提供了大量常用的函数式接口以丰富Lambda的典型使用场景，它们主要在 java.util.function 包中被提供。 下面是最常用的几个接口及使用示例。 1.Supplier接口java.util.function.Supplier 接口仅包含一个无参的方法： T get() 。用来获取一个泛型参数指定类型的对象数据。要实现该接口，就需要重写get方法并且对外提供一个类型为T的对象。 示例代码： public class DemoSupplier &#123; private static String getString(Supplier&lt;String&gt; supplier) &#123; return supplier.get(); &#125; public static void main(String[] args) &#123; String msgA = \"Hello\"; String msgB = \"World\"; System.out.println(getString(() -&gt; msgA + msgB)); &#125;&#125; 2.Consumer接口java.util.function.Consumer 接口则正好与Supplier接口相反，它不是生产一个数据，而是消费一个数据， 其数据类型由泛型决定。 抽象方法：void accept(T t) Consumer 接口中包含抽象方法 void accept(T t) ，意为消费一个指定泛型的数据。 示例代码： public class DemoConsumer &#123; private static void consumeString(Consumer&lt;String&gt; consumer) &#123; consumer.accept(\"Hello\"); &#125; public static void main(String[] args) &#123; consumeString(s -&gt; System.out.println(s));//这里也可以使用方法引用 &#125;&#125; 默认方法：andThen 以下是andThen方法的JDK源码： default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) &#123; Objects.requireNonNull(after); return (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;&#125; 也就是说，如果一个Consumer的实现调用了andThen方法，参数是另一个Consumer实现，则accept方法就是先进行前一个消费任务，再进行后一个消费任务。该方法返回一个Consumer，也就意味着可以在andThen方法后面继续调用andThen方法。 示例代码： public class DemoConsumerAndThen &#123; private static void consumeString(Consumer&lt;String&gt; one, Consumer&lt;String&gt; two) &#123; one.andThen(two).accept(\"Hello\"); &#125; public static void main(String[] args) &#123; consumeString( s -&gt; System.out.println(s.toUpperCase()), s -&gt; System.out.println(s.toLowerCase())); &#125;&#125; 3.Predicate接口如果我们需要对某种数据进行判断，并得到一个boolean值，那么可以使用java.util.function.Predicate 接口。 抽象方法：boolean test(T t) 示例代码： private static void method(Predicate&lt;String&gt; predicate) &#123; boolean isLongerThan5 = predicate.test(\"HelloWorld\"); System.out.println(\"字符串长度大于5吗？：\" + isLongerThan5);&#125;public static void main(String[] args) &#123; method(s -&gt; s.length() &gt; 5);&#125; 默认方法：and JDK源码如下： default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) &#123; Objects.requireNonNull(other); return (t) -&gt; test(t) &amp;&amp; other.test(t);&#125; 该方法就是将两个 Predicate 条件使用“与”逻辑连接起来实现“并且”的效果。 默认方法：or JDK源码如下： default Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other) &#123; Objects.requireNonNull(other); return (t) -&gt; test(t) || other.test(t);&#125; 该方法就是将两个 Predicate 条件使用逻辑“或”进行连接。 默认方法：negate JDK源码如下： default Predicate&lt;T&gt; negate() &#123; return (t) -&gt; !test(t);&#125; 该方法就是将test方法的返回结果进行取反。 示例代码： public class DemoPredicateMethod &#123; private static void method(Predicate&lt;String&gt; one, Predicate&lt;String&gt; two) &#123; boolean testAnd = one.and(two).test(\"HelloWorld\"); System.out.println(testAnd);//true boolean testOr = one.or(two).test(\"Hello\"); System.out.println(testOr);//true boolean testNegate = one.negate().test(\"AelloWorld\"); System.out.println(testNegate);//true &#125; public static void main(String[] args) &#123; method(s -&gt; s.startsWith(\"H\"), s -&gt; s.length() &gt; 5); &#125;&#125; 4.Function接口java.util.function.Function&lt;T,R&gt; 接口用来根据一个类型的数据得到另一个类型的数据，也就是将T类型数据转换成R类型数据 抽象方法：R apply(T t) 示例代码： public class DemoFunction &#123; public static void main(String[] args) &#123; Integer num = getValue(s -&gt; Integer.parseInt(s));//此处也可以使用方法引用 System.out.println(num); &#125; private static Integer getValue(Function&lt;String, Integer&gt; function)&#123; return function.apply(\"10\"); &#125;&#125; 默认方法：andThen JDK源码如下： default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) &#123; Objects.requireNonNull(after); return (T t) -&gt; after.apply(apply(t));&#125; 该方法用来对多个Function进行组合操作，先执行前一个Function接口实现的apply方法，再将返回的结果作为后一个Function接口实现的apply方法参数进行操作，这跟Consumer接口中的andThen方法差不多。 示例代码： public class DemoFunctionAndThen &#123; private static void method(Function&lt;String, Integer&gt; one, Function&lt;Integer, Integer&gt; two) &#123; int num = one.andThen(two).apply(\"10\"); System.out.println(num + 20); &#125; public static void main(String[] args) &#123; method(str -&gt; Integer.parseInt(str), i -&gt; i *= 10); &#125;&#125; 上述代码在执行method方法时，会现将字符串“10”转成整型10，然后将10乘以10得到的结果返回。 以上都是JDK8新增的函数式接口，这些接口在JDK8的新特性Stream流中也有广泛的使用，其他JDK提供的函数式接口跟这些类似，在这里就不一一介绍，基本上都是帮助我们省去了自定义函数式接口的操作。","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://www.ithushuai.com/categories/JAVA/"}],"tags":[{"name":"jdk8","slug":"jdk8","permalink":"http://www.ithushuai.com/tags/jdk8/"}]},{"title":"java类中静态变量是如何被赋值的","slug":"static-variable-how2be-assigned","date":"2019-12-08T11:00:06.000Z","updated":"2019-12-08T15:15:47.734Z","comments":true,"path":"2019/12/08/static-variable-how2be-assigned/","link":"","permalink":"http://www.ithushuai.com/2019/12/08/static-variable-how2be-assigned/","excerpt":"","text":"我们知道java中类加载的过程分为：加载、连接、初始化，其中连接阶段又分为验证、准备和解析，准备阶段的动作就是为类的静态变量分配内存，并将其设置为一个默认值，java中各种数据类型的默认值如下： 数据类型 默认值 byte 0 short 0 int 0 long 0 float 0.0 double 0.0 char （空） boolean false 引用类型 null 初始化过程就是为类的静态变量赋予正确的初始值。很多人可能认为静态变量在类中的位置是平行的，位置不同不会导致变量的值不同，这里举两个例子来深刻理解一下准备阶段以及初始化阶段的成员变量的值是如何变化的：例1： public class MyTest &#123; public static void main(String[] args) &#123; Singleton singleton &#x3D; Singleton.getInstance(); System.out.println(&quot;counter1: &quot; + Singleton.counter1); System.out.println(&quot;counter2: &quot; + Singleton.counter2); &#125;&#125;class Singleton &#123; public static int counter1; public static int counter2 &#x3D; 0; private static Singleton singleton &#x3D; new Singleton(); private Singleton() &#123; counter1++; counter2++; &#125; public static Singleton getInstance() &#123; return singleton; &#125;&#125; 输出结果为： counter1: 1counter2: 1 在main方法中调用了Singleton 类的静态方法getInstance，因此属于对该类的主动使用，因此Singleton 会进行初始化，关于对类的主动使用在我的另外一篇博客“类加载器的阶段分析”https://blog.csdn.net/weixin_42105936/article/details/100171009中有详细描述。在初始化阶段发生之前，先会进行准备阶段，也是就为变量赋予默认值，准备阶段完成之后，各个变量的初始值分别为： counter1：0counter2：0singleton：null 接下来就是初始化：为类的静态变量赋予正确的初始值，初始化顺序如下： 由于counter1，没有额外指定初始值，所以维持默认值0； counter2被赋予新的值，仍然为0； 在给singleton 初始化时，由于使用了new关键字，所以需要执行构造方法，执行counter1++，counter2++后counter1和counter2都自增变成了1； 在初始化阶段完毕之后，counter1为1，counter2为1，因此控制台输出结果如上。例2： public class MyTest &#123; public static void main(String[] args) &#123; Singleton singleton &#x3D; Singleton.getInstance(); System.out.println(&quot;counter1: &quot; + Singleton.counter1); System.out.println(&quot;counter2: &quot; + Singleton.counter2); &#125;&#125;class Singleton &#123; public static int counter1; private static Singleton singleton &#x3D; new Singleton(); private Singleton() &#123; counter1++; counter2++; &#125; public static int counter2 &#x3D; 0; public static Singleton getInstance() &#123; return singleton; &#125;&#125; 输出结果为： counter1: 1counter2: 0 例2代码与例1代码的唯一不同，就是成员变量counter2 和singleton的位置不同，于是就会产生疑问：静态成员的位置不同也会导致变量成员值的不同吗？我们还是来分析一下：首先还是准备阶段，给变量依次赋予默认值之后： counter1：0singleton：nullcounter2：0 同样类需要初始化，初始化步骤如下： 由于counter1，没有额外指定初始值，所以维持默认值0； 在给singleton 初始化时，由于使用了new关键字，所以需要执行构造方法，执行counter1++，counter2++，在此之前，counter1和counter2都是0，自增之后，counter1和counter2都变成了1； counter2初始化，被赋予新的值，变成0； 由上面的两个例子加分析后我们得出一个结论：静态变量在初始化时是顺序执行初始化工作的，静态变量的位置不同有可能导致最终的值不同。关键还是要理解准备阶段和初始化阶段JVM的所进行的动作。","categories":[{"name":"JVM","slug":"JVM","permalink":"http://www.ithushuai.com/categories/JVM/"}],"tags":[]}]}